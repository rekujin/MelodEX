import { useState } from 'react'
import { useNavigate } from 'react-router-dom'
import './Login.css'
import supabase from "../helper/supabaseClient"

const translateSupabaseError = (error) => {
  if (!error?.message) return '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Ö–æ–¥–µ'
  
  const msg = error.message.toLowerCase()
  
  if (msg.includes('invalid login credentials'))
    return '–ù–µ–≤–µ—Ä–Ω—ã–π email –∏–ª–∏ –ø–∞—Ä–æ–ª—å'
  if (msg.includes('email not confirmed'))
    return '–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ email –ø–µ—Ä–µ–¥ –≤—Ö–æ–¥–æ–º'
  if (msg.includes('invalid email'))
    return '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email'
  if (msg.includes('email rate limit'))
    return '–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –ø–æ–ø—ã—Ç–æ–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.'
    
  return error.message
}

const VALIDATION = {
  EMAIL_REGEX: /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$/,
  CYRILLIC_REGEX: /[–∞-—è–ê-–Ø—ë–Å]/,
}

const FIELDS = {
  email: {
    label: 'Email',
    type: 'email',
    placeholder: 'example@mail.com',
    validate: (val) => {
      if (!val) return '–í–≤–µ–¥–∏—Ç–µ email'
      if (VALIDATION.CYRILLIC_REGEX.test(val)) return 'Email –Ω–µ –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ä—É—Å—Å–∫–∏–µ —Å–∏–º–≤–æ–ª—ã'
      if (!VALIDATION.EMAIL_REGEX.test(val)) return '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç email'
      return null
    }
  },
  password: {
    label: '–ü–∞—Ä–æ–ª—å',
    type: 'password',
    placeholder: '–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –ø–∞—Ä–æ–ª—å',
    validate: (val) => {
      if (!val) return '–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å'
      return null
    }
  }
}

function Login() {
  const navigate = useNavigate()
  const [formData, setFormData] = useState({ email: '', password: '' })
  const [message, setMessage] = useState({ text: '', type: '' })
  const [isLoading, setIsLoading] = useState(false)
  const [fieldErrors, setFieldErrors] = useState({})
  const [showPassword, setShowPassword] = useState(false)

  const handleInputChange = (field, value) => {
    if (field !== 'username' && VALIDATION.CYRILLIC_REGEX.test(value)) return
    setFormData(prev => ({ ...prev, [field]: value }))
    if (fieldErrors[field]) {
      setFieldErrors(prev => ({ ...prev, [field]: null }))
    }
  }

  const handleSubmit = async (e) => {
    e.preventDefault()
    
    const errors = {}
    let hasErrors = false
    
    for (const field of Object.keys(FIELDS)) {
      const error = FIELDS[field].validate(formData[field])
      if (error) {
        errors[field] = error
        hasErrors = true
      }
    }
    
    if (hasErrors) {
      setFieldErrors(errors)
      const firstErrorField = Object.keys(errors).find(field => errors[field])
      setMessage({ text: errors[firstErrorField], type: 'error' })
      return
    }

    setIsLoading(true)
    try {
      const { error } = await supabase.auth.signInWithPassword({
        email: formData.email,
        password: formData.password,
      })

      if (error) throw error

      setMessage({
        text: '–í—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ!',
        type: 'success'
      })
      
      setTimeout(() => {
        navigate('/profile')
      }, 1000)
      
    } catch (error) {
      setMessage({
        text: translateSupabaseError(error) || '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Ö–æ–¥–µ',
        type: 'error'
      })
    } finally {
      setIsLoading(false)
    }
  }

  return (
    <div className="auth-container">
      <h2>–í—Ö–æ–¥</h2>
      {message.text && (
        <div className={`message ${message.type}`}>{message.text}</div>
      )}
      <form onSubmit={handleSubmit} noValidate>
        {Object.entries(FIELDS).map(([field, config]) => (
          <div className="form-group" key={field}>
            <div className="input-wrapper">
              <input
                id={field}
                type={field === 'password' ? (showPassword ? 'text' : 'password') : config.type}
                value={formData[field]}
                onChange={(e) => handleInputChange(field, e.target.value)}
                placeholder={config.placeholder}
                className={fieldErrors[field] ? 'input-error' : ''}
              />
              <label htmlFor={field}>{config.label}</label>
              {field === 'password' && (
                <button
                  type="button"
                  onClick={() => setShowPassword(!showPassword)}
                  className="toggle-password"
                >
                  {showPassword ? 'üîí' : 'üëÅÔ∏è'}
                </button>
              )}
            </div>
          </div>
        ))}
        <button
          type="submit"
          disabled={isLoading}
          className="submit-btn"
        >
          {isLoading ? "–í—Ö–æ–¥..." : "–í–æ–π—Ç–∏"}
        </button>
      </form>
    </div>
  )
}

export default Login